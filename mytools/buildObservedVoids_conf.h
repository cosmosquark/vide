/** @file buildObservedVoids_conf.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef BUILDOBSERVEDVOIDS_CONF_H
#define BUILDOBSERVEDVOIDS_CONF_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef BUILDOBSERVEDVOIDS_CONF_PACKAGE
/** @brief the program name */
#define BUILDOBSERVEDVOIDS_CONF_PACKAGE "buildObservedVoids"
#endif

#ifndef BUILDOBSERVEDVOIDS_CONF_VERSION
/** @brief the program version */
#define BUILDOBSERVEDVOIDS_CONF_VERSION "0"
#endif

/** @brief Where the command line options are stored */
struct buildObservedVoids_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * desc_arg;	/**< @brief The description file name for the voids (jozov generated).  */
  char * desc_orig;	/**< @brief The description file name for the voids (jozov generated) original value given at command line.  */
  const char *desc_help; /**< @brief The description file name for the voids (jozov generated) help description.  */
  char * partzone_arg;	/**< @brief Particles/Zones bind file.  */
  char * partzone_orig;	/**< @brief Particles/Zones bind file original value given at command line.  */
  const char *partzone_help; /**< @brief Particles/Zones bind file help description.  */
  char * zonevoid_arg;	/**< @brief Void/zone bind file (jozov generated).  */
  char * zonevoid_orig;	/**< @brief Void/zone bind file (jozov generated) original value given at command line.  */
  const char *zonevoid_help; /**< @brief Void/zone bind file (jozov generated) help description.  */
  double minProba_arg;	/**< @brief Minimal probability to accept (default='0.0').  */
  char * minProba_orig;	/**< @brief Minimal probability to accept original value given at command line.  */
  const char *minProba_help; /**< @brief Minimal probability to accept help description.  */
  double densityThreshold_arg;	/**< @brief Density threshold to consider a stable void (default='-0.8').  */
  char * densityThreshold_orig;	/**< @brief Density threshold to consider a stable void original value given at command line.  */
  const char *densityThreshold_help; /**< @brief Density threshold to consider a stable void help description.  */
  char * configFile_arg;	/**< @brief Configuration file.  */
  char * configFile_orig;	/**< @brief Configuration file original value given at command line.  */
  const char *configFile_help; /**< @brief Configuration file help description.  */
  char * output_arg;	/**< @brief Output file (default='void_info.txt').  */
  char * output_orig;	/**< @brief Output file original value given at command line.  */
  const char *output_help; /**< @brief Output file help description.  */
  char * gridOutput_arg;	/**< @brief 3d grid output of voids (default='all_voids.nc').  */
  char * gridOutput_orig;	/**< @brief 3d grid output of voids original value given at command line.  */
  const char *gridOutput_help; /**< @brief 3d grid output of voids help description.  */
  int quiet_flag;	/**< @brief Quiet output (default=off).  */
  const char *quiet_help; /**< @brief Quiet output help description.  */
  char * dumpVoids_arg;	/**< @brief Dump the particles in void in a file.  */
  char * dumpVoids_orig;	/**< @brief Dump the particles in void in a file original value given at command line.  */
  const char *dumpVoids_help; /**< @brief Dump the particles in void in a file help description.  */
  char * ramsesBase_arg;	/**< @brief Base directory for ramses.  */
  char * ramsesBase_orig;	/**< @brief Base directory for ramses original value given at command line.  */
  const char *ramsesBase_help; /**< @brief Base directory for ramses help description.  */
  int ramsesId_arg;	/**< @brief Ramses snapshot id.  */
  char * ramsesId_orig;	/**< @brief Ramses snapshot id original value given at command line.  */
  const char *ramsesId_help; /**< @brief Ramses snapshot id help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int desc_given ;	/**< @brief Whether desc was given.  */
  unsigned int partzone_given ;	/**< @brief Whether partzone was given.  */
  unsigned int zonevoid_given ;	/**< @brief Whether zonevoid was given.  */
  unsigned int minProba_given ;	/**< @brief Whether minProba was given.  */
  unsigned int densityThreshold_given ;	/**< @brief Whether densityThreshold was given.  */
  unsigned int configFile_given ;	/**< @brief Whether configFile was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int gridOutput_given ;	/**< @brief Whether gridOutput was given.  */
  unsigned int quiet_given ;	/**< @brief Whether quiet was given.  */
  unsigned int dumpVoids_given ;	/**< @brief Whether dumpVoids was given.  */
  unsigned int ramsesBase_given ;	/**< @brief Whether ramsesBase was given.  */
  unsigned int ramsesId_given ;	/**< @brief Whether ramsesId was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct buildObservedVoids_conf_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure buildObservedVoids_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure buildObservedVoids_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *buildObservedVoids_info_purpose;
/** @brief the usage string of the program */
extern const char *buildObservedVoids_info_usage;
/** @brief all the lines making the help output */
extern const char *buildObservedVoids_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int buildObservedVoids_conf (int argc, char * const *argv,
  struct buildObservedVoids_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use buildObservedVoids_conf_ext() instead
 */
int buildObservedVoids_conf2 (int argc, char * const *argv,
  struct buildObservedVoids_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int buildObservedVoids_conf_ext (int argc, char * const *argv,
  struct buildObservedVoids_info *args_info,
  struct buildObservedVoids_conf_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int buildObservedVoids_conf_dump(FILE *outfile,
  struct buildObservedVoids_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int buildObservedVoids_conf_file_save(const char *filename,
  struct buildObservedVoids_info *args_info);

/**
 * Print the help
 */
void buildObservedVoids_conf_print_help(void);
/**
 * Print the version
 */
void buildObservedVoids_conf_print_version(void);

/**
 * Initializes all the fields a buildObservedVoids_conf_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void buildObservedVoids_conf_params_init(struct buildObservedVoids_conf_params *params);

/**
 * Allocates dynamically a buildObservedVoids_conf_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized buildObservedVoids_conf_params structure
 */
struct buildObservedVoids_conf_params *buildObservedVoids_conf_params_create(void);

/**
 * Initializes the passed buildObservedVoids_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void buildObservedVoids_conf_init (struct buildObservedVoids_info *args_info);
/**
 * Deallocates the string fields of the buildObservedVoids_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void buildObservedVoids_conf_free (struct buildObservedVoids_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use buildObservedVoids_conf_config_file() instead
 */
int buildObservedVoids_conf_configfile (char * const filename,
  struct buildObservedVoids_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int buildObservedVoids_conf_config_file (char * const filename,
  struct buildObservedVoids_info *args_info,
  struct buildObservedVoids_conf_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int buildObservedVoids_conf_required (struct buildObservedVoids_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* BUILDOBSERVEDVOIDS_CONF_H */
